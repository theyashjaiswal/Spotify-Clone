{"version":3,"sources":["spotify.js","Login.js","Player.js","DataLayer.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["loginUrl","join","Login","className","src","alt","href","Player","spotify","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","SpotifyWebApi","App","useContext","token","user","dispatch","useEffect","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","type","setAccessToken","getMe","then","Boolean","hostname","match","state","action","console","log","ReactDOM","render","StrictMode","playlists","discover_weekly","top_artists","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6QA8BaA,G,YAAQ,UA5BO,yCA4BP,sBAzBJ,mCAyBI,yBA1BD,yBA0BC,kBAvBN,CACb,8BACA,4BACA,2BACA,gBACA,8BAkBwGC,KACxG,OADmB,0CCfNC,MAZf,WACE,OACE,yBAAKC,UAAU,SACb,yBACEC,IAAI,0EACJC,IAAI,KAEN,uBAAGC,KAAMN,GAAT,yB,gBCASO,MARf,YACE,OAD2B,EAAXC,QAEd,6BACE,oDCHOC,EAAmBC,0BAEnBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,SAA1B,OACvB,kBAACL,EAAiBM,SAAlB,CAA2BC,MAAOC,qBAAWJ,EAASD,IACnDE,ICECN,EAAU,IAAIU,IA0CLC,MAxCf,WAAe,MDAwBC,qBAAWX,GCAnC,0BAGEY,GAHF,EAGJC,KAHI,EAGED,OAASE,EAHX,KA6Bb,OAvBAC,qBAAU,WACR,IAAMC,EJADC,OAAOC,SAASF,KACpBG,UAAU,GACVC,MAAM,KACNC,QAAO,SAACC,EAASC,GAGhB,IAAIC,EAAQD,EAAKH,MAAM,KAGvB,OADAE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IACtCF,IACN,IIRHL,OAAOC,SAASF,KAAO,GACvB,IAAIU,EAASV,EAAKW,aAEdD,IACFZ,EAAS,CACPc,KAAM,YACNhB,MAAOc,IAET3B,EAAQ8B,eAAeH,GACvB3B,EAAQ+B,QAAQC,MAAK,SAAClB,GAEpBC,EAAS,CACPc,KAAM,WACNf,eAKL,CAACD,EAAOE,IAIT,yBAAKpB,UAAU,OAGXkB,EAAQ,kBAAC,EAAD,CAAQb,QAASA,IAAc,kBAAC,EAAD,QChC3BiC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2D,WCaS9B,EAnBC,SAAC+B,EAAOC,GAGtB,OAFAC,QAAQC,IAAIF,GAEJA,EAAOR,MACb,IAAK,WACH,OAAO,2BACFO,GADL,IAEEtB,KAAMuB,EAAOvB,OAEjB,IAAK,YACH,OAAO,2BACFsB,GADL,IAEEvB,MAAOwB,EAAOxB,QAElB,QACE,OAAOuB,ICnBbI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAWtC,aDVa,CAC1BU,KAAM,KAEND,MAAO,mCACP8B,UAAW,GACX3C,QAAS,KACT4C,gBAAiB,KACjBC,YAAa,KACbC,SAAS,EACTtB,KAAM,MCCmCnB,QAASA,GAC9C,kBAAC,EAAD,QAGJ0C,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.a79ab229.chunk.js","sourcesContent":["// https://developer.spotify.com/documentation/web-playback-sdk/quick-start/#\n\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"1f6b27b71a7c47d3886c752c3cebfd6f\";\n\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-recently-played\",\n  \"user-read-playback-state\",\n  \"user-top-read\",\n  \"user-modify-playback-state\",\n];\n\nexport const getTokenFromUrl = () => {\n  //pulling the accessToken\n  return window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce((initial, item) => {\n      // it will split key value pairs of uri params\n      // #accessToken=mysupersecuritykey&name=sonny&app=spotify\n      let parts = item.split(\"=\");\n      //grabs accesstoken\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n      return initial;\n    }, {});\n};\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n  \"%20\"\n)}&response_type=token&show_dialog=true`;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { loginUrl } from \"./spotify\";\nfunction Login() {\n  return (\n    <div className=\"login\">\n      <img\n        src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\n        alt=\"\"\n      ></img>\n      <a href={loginUrl}> LOGIN WITH SPOTIFY</a>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\n\nfunction Player({ spotify }) {\n  return (\n    <div>\n      <h1>Welcome to spotify</h1>\n    </div>\n  );\n}\n\nexport default Player;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const DataLayerContext = createContext();\n\nexport const DataLayer = ({ initialState, reducer, children }) => (\n  <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </DataLayerContext.Provider>\n);\n\nexport const useDataLayerValue = () => useContext(DataLayerContext);\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Login\";\nimport { getTokenFromUrl } from \"./spotify\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Player from \"./Player\";\nimport { useDataLayerValue } from \"./DataLayer\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  //dispatch is like a gun that shoots the data layer to update its state\n  //we are using contextAPI and dispatch instead of UseState\n  const [{ user, token }, dispatch] = useDataLayerValue();\n\n  //run code based on a given condition i.e[]\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    //to remove the access token for security kinda reasons\n    window.location.hash = \"\";\n    let _token = hash.access_token;\n\n    if (_token) {\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      });\n      spotify.setAccessToken(_token);\n      spotify.getMe().then((user) => {\n        // console.log(\"HeyCONSOLE\", user);\n        dispatch({\n          type: \"SET_USER\",\n          user,\n        });\n      });\n    }\n    //console.log(\"I Have A Token \", token);\n  }, [token, dispatch]);\n\n  return (\n    //BEM\n    <div className=\"App\">\n      {\n        // if there is a token start the player or redirect to login page\n        token ? <Player spotify={spotify} /> : <Login />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\n  user: null,\n  //remove after development\n  token: \"1f6b27b71a7c47d3886c752c3cebfd6f\",\n  playlists: [],\n  spotify: null,\n  discover_weekly: null,\n  top_artists: null,\n  playing: false,\n  item: null,\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  //Action -> type, [payload]\n  switch (action.type) {\n    case \"SET_USER\":\n      return {\n        ...state,\n        user: action.user,\n      };\n    case \"SET_TOKEN\":\n      return {\n        ...state,\n        token: action.token,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { DataLayer } from \"./DataLayer\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n      <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}